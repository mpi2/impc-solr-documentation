# To use the Docker Hub docker image
# image: docker:latest
image: $CI_REGISTRY/mouse-informatics/docker:latest

variables:

   DOCKER_HOST: tcp://docker:2375/
   DOCKER_DRIVER: overlay2

   MOUNT_POINT: /builds/$CI_PROJECT_PATH/mnt

   CI_REGISTRY: dockerhub.ebi.ac.uk
   CI_REGISTRY_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH


   DOCKER_TLS_CERTDIR: ""
   SCAN_KUBERNETES_MANIFESTS: "true"


include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml



stages:
#   - env
   - build
   - production-deploy

build_image:
    stage: build
    services:
      - name: $CI_REGISTRY/mouse-informatics/dind:latest
        alias: docker
    except:
        - schedules
        - triggers
        - pipelines
    script:
        # - docker info
        - mkdir -p "$MOUNT_POINT"
        - echo "${CI_REGISTRY_PASSWORD}" | docker login -u "${CI_REGISTRY_USER}" --password-stdin  ${CI_REGISTRY}

        - sed -i "s|maven|${LOCAL_GITLAB_MAVEN_IMAGE}|g" Dockerfile       
        - sed -i "s|FROM amazoncorretto|FROM ${LOCAL_GITLAB_CORRETTO_IMAGE}|g" Dockerfile     
            
        - docker build -t "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_SHA:0:12}" -t "${CI_REGISTRY_IMAGE}":latest .  | tee ${MOUNT_POINT}/build.log
                
        - docker push "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_SHA:0:12}"  | tee ${MOUNT_POINT}/push.log
        - docker push "${CI_REGISTRY_IMAGE}":latest  | tee ${MOUNT_POINT}/push.log
       
        - docker logout ${CI_REGISTRY}

        - |
          if [[ "${DOCKER_HUB_PUSH}" == "true" ]]; then

              echo "${DOCKER_HUB_PSWD}" | docker login -u "${DOCKER_HUB_USER}" --password-stdin
              docker tag "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_SHA:0:12}" "${DOCKER_HUB_USER}"/"${DOCKER_HUB_REPO}":"${CI_COMMIT_SHA:0:12}"
              docker tag "${CI_REGISTRY_IMAGE}":"${CI_COMMIT_SHA:0:12}" "${DOCKER_HUB_USER}"/"${DOCKER_HUB_REPO}":latest
              docker push "${DOCKER_HUB_USER}"/"${DOCKER_HUB_REPO}":"${CI_COMMIT_SHA:0:12}"  | tee ${MOUNT_POINT}/dockerhub-push-latest.log
              docker push "${DOCKER_HUB_USER}"/"${DOCKER_HUB_REPO}":latest  | tee ${MOUNT_POINT}/dockerhub-push-latest.log
              docker logout
          fi
    artifacts:
        paths:
            - "$MOUNT_POINT/"

hh-production:
  stage: production-deploy
  image: $CI_REGISTRY/mouse-informatics/helm-kubectl-alpine:latest
  rules:
    - if: '$CI_PROJECT_NAMESPACE == "mouse-informatics" && $CI_COMMIT_REF_NAME == "main"'
  script:
    # Only deploy from the MPI2 impc-production-tracker repository rather than repository forks
    - |
      if [ ! -z ${HH_KUBERNETES_ENDPOINT+set} ]; then

        kubectl config set-cluster local --server="${HH_KUBERNETES_ENDPOINT}"
        kubectl config set clusters.local.certificate-authority-data "${HH_KUBERNETES_CERTIFICATE_AUTHORITY_DATA}"
        kubectl config set-credentials ${HH_KUBERNETES_USER} --token="${HH_KUBERNETES_USER_TOKEN}"
        kubectl config set-context "${HH_KUBERNETES_NAMESPACE}" --cluster=local --user=${HH_KUBERNETES_USER} --namespace="${HH_KUBERNETES_NAMESPACE}"
        kubectl config use-context "${HH_KUBERNETES_NAMESPACE}"
        kubectl version

        #
        #
        # Substitute the "latest" image tag in your deployment template with a more specific tag
        # and record the deployment so you can rollback to this particular version.
        #
        sed -i "s/STRING_REPLACED_DURING_REDEPLOY/$(date)/g" kube/wp/production/api-service/api-service-deployment.yaml

        if kubectl apply -f kube/wp/production/api-service/api-service-deployment.yaml --record | grep -q unchanged; then
            echo "=> Patching deployment to force image update."
            kubectl patch -f kube/wp/production/api-service/api-service-deployment.yaml --record -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"ci-last-updated\":\"$(date +'%s')\"}}}}}"
        else
            echo "=> Deployment apply has changed the object, no need to force image update."
        fi
        #
        #
        # Log the status of the application deployment
        #
        kubectl rollout status -f kube/wp/production/api-service/api-service-deployment.yaml
        kubectl get pod,deployment,rs,svc,ing
      fi

hx-production:
  stage: production-deploy
  image: $CI_REGISTRY/mouse-informatics/helm-kubectl-alpine:latest
  rules:
    - if: '$CI_PROJECT_NAMESPACE == "mouse-informatics" && $CI_COMMIT_REF_NAME == "main"'
  script:
    # Only deploy from the MPI2 impc-production-tracker repository rather than repository forks
    - |
      if [ ! -z ${HX_KUBERNETES_ENDPOINT+set} ]; then

        kubectl config set-cluster local --server="${HX_KUBERNETES_ENDPOINT}"
        kubectl config set clusters.local.certificate-authority-data "${HX_KUBERNETES_CERTIFICATE_AUTHORITY_DATA}"
        kubectl config set-credentials ${HX_KUBERNETES_USER} --token="${HX_KUBERNETES_USER_TOKEN}"
        kubectl config set-context "${HX_KUBERNETES_NAMESPACE}" --cluster=local --user=${HX_KUBERNETES_USER} --namespace="${HX_KUBERNETES_NAMESPACE}"
        kubectl config use-context "${HX_KUBERNETES_NAMESPACE}"
        kubectl version

        #
        #
        # Substitute the "latest" image tag in your deployment template with a more specific tag
        # and record the deployment so you can rollback to this particular version.
        #
        sed -i "s/STRING_REPLACED_DURING_REDEPLOY/$(date)/g" kube/wp/production/api-service/api-service-deployment.yaml

        if kubectl apply -f kube/wp/production/api-service/api-service-deployment.yaml --record | grep -q unchanged; then
            echo "=> Patching deployment to force image update."
            kubectl patch -f kube/wp/production/api-service/api-service-deployment.yaml --record -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"ci-last-updated\":\"$(date +'%s')\"}}}}}"
        else
            echo "=> Deployment apply has changed the object, no need to force image update."
        fi
        #
        #
        # Log the status of the application deployment
        #
        kubectl rollout status -f kube/wp/production/api-service/api-service-deployment.yaml
        kubectl get pod,deployment,rs,svc,ing
      fi





