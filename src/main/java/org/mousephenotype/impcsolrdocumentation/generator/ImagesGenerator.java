package org.mousephenotype.impcsolrdocumentation.generator;

import org.mousephenotype.impcsolrdocumentation.model.Images;

import java.util.List;

public class ImagesGenerator {


    public static Images generateExampleImagesResponse() {
        Images images = new Images();
        images.setId("EXP001");
        images.setDataType("Experiment Type");
        images.setMouseId(123);
        images.setGender("Male");
        images.setColonyName("Colony A");
        images.setGenotype("Homozygous");
        images.setTagName(List.of("Tag1", "Tag2"));
        images.setTagValue(List.of("Value1", "Value2"));
        images.setXStart(List.of(1.0f));
        images.setXEnd(List.of(2.0f));
        images.setYStart(List.of(1.0f));
        images.setYEnd(List.of(2.0f));
        images.setAnnotationTermId(List.of("Term1", "Term2"));
        images.setAnnotationTermName(List.of("Name1", "Name2"));
        images.setName("Experiment Name");
        images.setAccession("ACC001");
        images.setAlleleAccession("AlleleAcc001");
        images.setExpName(List.of("Exp1", "Exp2"));
        images.setProcedureName(List.of("Procedure1", "Procedure2"));
        images.setExpDescription(List.of("Description1", "Description2"));
        images.setLiveSampleGroup(List.of("Group1", "Group2"));
        images.setFullResolutionFilePath("/path/to/full/resolution/file");
        images.setLargeThumbnailFilePath("/path/to/large/thumbnail");
        images.setOriginalFileName("original_filename.jpg");
        images.setSmallThumbnailFilePath("/path/to/small/thumbnail");
        images.setAgeInWeeks("5");
        images.setSymbol(List.of("Symbol1", "Symbol2"));
        images.setInstitute("Institute A");
        images.setSangerSymbol(List.of("Sanger1", "Sanger2"));
        images.setGeneName(List.of("Gene1", "Gene2"));
        images.setSubtype(List.of("Subtype1", "Subtype2"));
        images.setGeneSynonyms(List.of("Synonym1", "Synonym2"));
        images.setAlleleName(List.of("Allele1", "Allele2"));
        images.setMaTermName(List.of("MATerm1", "MATerm2"));
        images.setMpTermId(List.of("MPTermId1", "MPTermId2"));
        images.setMpTermName(List.of("MPTermName1", "MPTermName2"));
        images.setExpNameExp(List.of("ExpNameExp1", "ExpNameExp2"));
        images.setSymbolGene(List.of("SymbolGene1", "SymbolGene2"));
        images.setTopLevel(List.of("TopLevel1", "TopLevel2"));
        images.setLiveSampleId(List.of("LiveSampleId1", "LiveSampleId2"));
        images.setDcfId("DCF001");
        images.setDcfExpId("DCFExp001");
        images.setSangerProcedureName("SangerProcedure A");
        images.setSangerProcedureId(456);
        images.setGenotypeString("Genotype A");
        images.setEmbryoDataAvailable(true);
        images.setPhenotypingCenterId(789L);
        images.setPhenotypingCenter("Phenotyping Center A");
        images.setGeneAccession("GeneAcc001");
        images.setGeneSymbol("GeneSymbol A");
        images.setZygosity("Heterozygous");
        images.setSex("Female");
        images.setBiologicalModelId(101112L);
        images.setBiologicalSampleId(131415L);
        images.setBiologicalSampleGroup("Sample Group A");
        images.setColonyId(161718);
        images.setDateOfBirth("2021-01-01");
        images.setExternalSampleId("ExternalSample001");
        images.setPipelineId(192021L);
        images.setPipelineName("Pipeline A");
        images.setPipelineStableId("PipelineStable001");
        images.setProcedureId(222324L);
        images.setProcedureStableId("ProcedureStable001");
        images.setParameterId(252627L);
        images.setParameterName("Parameter A");
        images.setParameterStableId("ParameterStable001");
        images.setExperimentId(282930L);
        images.setExperimentSourceId("ExperimentSource001");
        images.setDateOfExperiment("2021-02-01");
        images.setPValue(List.of(0.01f, 0.05f));
        images.setMgiAccessionId(List.of("MGI:123456", "MGI:789012"));
        images.setMarkerSymbol(List.of("Symbol1", "Symbol2"));
        images.setMarkerName(List.of("Marker Name 1", "Marker Name 2"));
        images.setMarkerSynonym(List.of("Synonym1", "Synonym2"));
        images.setMarkerType(List.of("Type1", "Type2"));
        images.setHumanGeneSymbol(List.of("Human Symbol 1", "Human Symbol 2"));
        images.setStatus(List.of("Status1", "Status2"));
        images.setLatestProductionCentre(List.of("Centre1", "Centre2"));
        images.setLatestPhenotypingCentre(List.of("Phenotyping Centre1", "Phenotyping Centre2"));
        images.setLatestPhenotypeStatus(List.of("Status1", "Status2"));
        images.setLegacyPhenotypeStatus(1); // Assuming an integer status code
        images.setDiseaseId(List.of("Disease1", "Disease2"));
        images.setDiseaseSource(List.of("Source1", "Source2"));
        images.setDiseaseTerm(List.of("Term1", "Term2"));
        images.setDiseaseAlts(List.of("Alt1", "Alt2"));
        images.setDiseaseClasses(List.of("Class1", "Class2"));
        images.setHumanCurated(List.of(true, false));
        images.setMouseCurated(List.of(true, false));
        images.setMgiPredicted(List.of(true, false));
        images.setImpcPredicted(List.of(true, false));
        images.setMgiPredictedKnownGene(List.of(true, false));
        images.setImpcPredictedKnownGene(List.of(true, false));
        images.setMgiNovelPredictedInLocus(List.of(true, false));
        images.setImpcNovelPredictedInLocus(List.of(true, false));
        images.setMpId(List.of("MP:0000001", "MP:0000002"));
        images.setMpTerm(List.of("Term1", "Term2"));
        images.setMpTermSynonym(List.of("Synonym1", "Synonym2"));
        images.setTopLevelMpId(List.of("MP:0000003", "MP:0000004"));
        images.setTopLevelMpTerm(List.of("Top Level Term1", "Top Level Term2"));
        images.setTopLevelMpTermSynonym(List.of("Top Level Synonym1", "Top Level Synonym2"));
        images.setIntermediateMpId(List.of("MP:0000005", "MP:0000006"));
        images.setIntermediateMpTerm(List.of("Intermediate Term1", "Intermediate Term2"));
        images.setIntermediateMpTermSynonym(List.of("Intermediate Synonym1", "Intermediate Synonym2"));
        images.setChildMpId(List.of("MP:0000007", "MP:0000008"));
        images.setChildMpTerm(List.of("Child Term1", "Child Term2"));
        images.setChildMpTermSynonym(List.of("Child Synonym1", "Child Synonym2"));
        images.setAnnotatedHigherLevelMpTermId(List.of("MP:0000009", "MP:0000010"));
        images.setAnnotatedHigherLevelMpTermName(List.of("Annotated Term1", "Annotated Term2"));
        images.setMaId(List.of("MA:0000001", "MA:0000002"));
        images.setMaTerm(List.of("MATerm1", "MATerm2"));
        images.setMaTermSynonym(List.of("MASynonym1", "MASynonym2"));
        images.setSelectedTopLevelMaId(List.of("MA:0000003", "MA:0000004"));
        images.setSelectedTopLevelMaTerm(List.of("Selected MA Term1", "Selected MA Term2"));
        images.setSelectedTopLevelMaTermSynonym(List.of("Selected MA Synonym1", "Selected MA Synonym2"));
        images.setChildMaId(List.of("MA:0000005", "MA:0000006"));
        images.setChildMaTerm(List.of("Child MATerm1", "Child MATerm2"));
        images.setChildMaTermSynonym(List.of("Child MASynonym1", "Child MASynonym2"));
        images.setHpId(List.of("HP:0000001", "HP:0000002"));
        images.setHpTerm(List.of("HPTerm1", "HPTerm2"));
        images.setText(List.of("Text1", "Text2"));
        images.setAutoSuggest(List.of("Suggest1", "Suggest2"));
        images.setTextSearch(List.of("Search1", "Search2"));
        images.setGeneQf(List.of("GeneQF1", "GeneQF2"));
        images.setMpQf(List.of("MPQF1", "MPQF2"));
        images.setDiseaseQf(List.of("DiseaseQF1", "DiseaseQF2"));
        images.setMaQf(List.of("MAQF1", "MAQF2"));
        images.setEmbryoDataAvailable(true);

        return images;
    }

}
